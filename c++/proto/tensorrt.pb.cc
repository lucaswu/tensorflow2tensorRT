// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorrt.proto

#include "tensorrt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorrt_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Argument;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConstTensor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InOutTensorInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OutputShape;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QuantizeActivationInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorrt_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_OperatorDef;
}  // namespace protobuf_tensorrt_2eproto
namespace tensorrt {
class ConstTensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstTensor>
      _instance;
} _ConstTensor_default_instance_;
class ArgumentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Argument>
      _instance;
} _Argument_default_instance_;
class OutputShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutputShape>
      _instance;
} _OutputShape_default_instance_;
class QuantizeActivationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuantizeActivationInfo>
      _instance;
} _QuantizeActivationInfo_default_instance_;
class OperatorDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperatorDef>
      _instance;
} _OperatorDef_default_instance_;
class InOutTensorInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InOutTensorInfo>
      _instance;
} _InOutTensorInfo_default_instance_;
class NetDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetDef>
      _instance;
} _NetDef_default_instance_;
}  // namespace tensorrt
namespace protobuf_tensorrt_2eproto {
static void InitDefaultsConstTensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_ConstTensor_default_instance_;
    new (ptr) ::tensorrt::ConstTensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::ConstTensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConstTensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConstTensor}, {}};

static void InitDefaultsArgument() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_Argument_default_instance_;
    new (ptr) ::tensorrt::Argument();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::Argument::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Argument =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArgument}, {}};

static void InitDefaultsOutputShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_OutputShape_default_instance_;
    new (ptr) ::tensorrt::OutputShape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::OutputShape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OutputShape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOutputShape}, {}};

static void InitDefaultsQuantizeActivationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_QuantizeActivationInfo_default_instance_;
    new (ptr) ::tensorrt::QuantizeActivationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::QuantizeActivationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuantizeActivationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuantizeActivationInfo}, {}};

static void InitDefaultsOperatorDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_OperatorDef_default_instance_;
    new (ptr) ::tensorrt::OperatorDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::OperatorDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OperatorDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOperatorDef}, {
      &protobuf_tensorrt_2eproto::scc_info_Argument.base,
      &protobuf_tensorrt_2eproto::scc_info_OutputShape.base,
      &protobuf_tensorrt_2eproto::scc_info_QuantizeActivationInfo.base,}};

static void InitDefaultsInOutTensorInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_InOutTensorInfo_default_instance_;
    new (ptr) ::tensorrt::InOutTensorInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::InOutTensorInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InOutTensorInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInOutTensorInfo}, {}};

static void InitDefaultsNetDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorrt::_NetDef_default_instance_;
    new (ptr) ::tensorrt::NetDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorrt::NetDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_NetDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNetDef}, {
      &protobuf_tensorrt_2eproto::scc_info_OperatorDef.base,
      &protobuf_tensorrt_2eproto::scc_info_Argument.base,
      &protobuf_tensorrt_2eproto::scc_info_ConstTensor.base,
      &protobuf_tensorrt_2eproto::scc_info_InOutTensorInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConstTensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Argument.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OutputShape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuantizeActivationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperatorDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InOutTensorInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetDef.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, int32_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, zero_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::ConstTensor, quantized_),
  ~0u,
  6,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, floats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::Argument, ints_),
  0,
  3,
  2,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OutputShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OutputShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OutputShape, dims_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, zero_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, minval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::QuantizeActivationInfo, maxval_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, output_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::OperatorDef, quantize_info_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::InOutTensorInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::InOutTensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::InOutTensorInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::InOutTensorInfo, dims_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, tensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, input_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorrt::NetDef, output_info_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::tensorrt::ConstTensor)},
  { 25, 36, sizeof(::tensorrt::Argument)},
  { 42, 48, sizeof(::tensorrt::OutputShape)},
  { 49, 58, sizeof(::tensorrt::QuantizeActivationInfo)},
  { 62, 75, sizeof(::tensorrt::OperatorDef)},
  { 83, 90, sizeof(::tensorrt::InOutTensorInfo)},
  { 92, 104, sizeof(::tensorrt::NetDef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_ConstTensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_Argument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_OutputShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_QuantizeActivationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_OperatorDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_InOutTensorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorrt::_NetDef_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorrt.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016tensorrt.proto\022\010tensorrt\"\354\001\n\013ConstTens"
      "or\022\014\n\004dims\030\001 \003(\003\0221\n\tdata_type\030\002 \001(\0162\024.te"
      "nsorrt.TensorType:\010DT_FLOAT\022\026\n\nfloat_dat"
      "a\030\003 \003(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\014\n\004n"
      "ame\030\005 \001(\t\022\016\n\006offset\030\006 \001(\003\022\021\n\tdata_size\030\007"
      " \001(\003\022\r\n\005scale\030\010 \001(\002\022\022\n\nzero_point\030\t \001(\005\022"
      "\030\n\tquantized\030\n \001(\010:\005false\"W\n\010Argument\022\014\n"
      "\004name\030\001 \001(\t\022\t\n\001f\030\002 \001(\002\022\t\n\001i\030\003 \001(\003\022\t\n\001s\030\004"
      " \001(\014\022\016\n\006floats\030\005 \003(\002\022\014\n\004ints\030\006 \003(\003\"\033\n\013Ou"
      "tputShape\022\014\n\004dims\030\001 \003(\003\"[\n\026QuantizeActiv"
      "ationInfo\022\r\n\005scale\030\001 \001(\002\022\022\n\nzero_point\030\002"
      " \001(\005\022\016\n\006minval\030\003 \001(\002\022\016\n\006maxval\030\004 \001(\002\"\372\001\n"
      "\013OperatorDef\022\r\n\005input\030\001 \003(\t\022\016\n\006output\030\002 "
      "\003(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\037\n\003arg\030\005"
      " \003(\0132\022.tensorrt.Argument\022+\n\014output_shape"
      "\030\006 \003(\0132\025.tensorrt.OutputShape\022)\n\013output_"
      "type\030\007 \003(\0162\024.tensorrt.TensorType\0227\n\rquan"
      "tize_info\030\010 \003(\0132 .tensorrt.QuantizeActiv"
      "ationInfo\"-\n\017InOutTensorInfo\022\014\n\004name\030\001 \001"
      "(\t\022\014\n\004dims\030\003 \003(\002\"\362\001\n\006NetDef\022\014\n\004name\030\001 \001("
      "\t\022!\n\002op\030\002 \003(\0132\025.tensorrt.OperatorDef\022\017\n\007"
      "version\030\003 \001(\t\022\037\n\003arg\030\004 \003(\0132\022.tensorrt.Ar"
      "gument\022&\n\007tensors\030\005 \003(\0132\025.tensorrt.Const"
      "Tensor\022-\n\ninput_info\030d \003(\0132\031.tensorrt.In"
      "OutTensorInfo\022.\n\013output_info\030e \003(\0132\031.ten"
      "sorrt.InOutTensorInfo*S\n\nTensorType\022\016\n\nD"
      "T_INVALID\020\000\022\014\n\010DT_FLOAT\020\001\022\014\n\010DT_UINT8\020\002\022"
      "\013\n\007DT_HALF\020\003\022\014\n\010DT_INT32\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorrt.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorrt_2eproto
namespace tensorrt {
const ::google::protobuf::EnumDescriptor* TensorType_descriptor() {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorrt_2eproto::file_level_enum_descriptors[0];
}
bool TensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConstTensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstTensor::kDimsFieldNumber;
const int ConstTensor::kDataTypeFieldNumber;
const int ConstTensor::kFloatDataFieldNumber;
const int ConstTensor::kInt32DataFieldNumber;
const int ConstTensor::kNameFieldNumber;
const int ConstTensor::kOffsetFieldNumber;
const int ConstTensor::kDataSizeFieldNumber;
const int ConstTensor::kScaleFieldNumber;
const int ConstTensor::kZeroPointFieldNumber;
const int ConstTensor::kQuantizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstTensor::ConstTensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_ConstTensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.ConstTensor)
}
ConstTensor::ConstTensor(const ConstTensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dims_(from.dims_),
      float_data_(from.float_data_),
      int32_data_(from.int32_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:tensorrt.ConstTensor)
}

void ConstTensor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantized_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(quantized_));
  data_type_ = 1;
}

ConstTensor::~ConstTensor() {
  // @@protoc_insertion_point(destructor:tensorrt.ConstTensor)
  SharedDtor();
}

void ConstTensor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConstTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstTensor::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstTensor& ConstTensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_ConstTensor.base);
  return *internal_default_instance();
}


void ConstTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.ConstTensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantized_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(quantized_));
    data_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConstTensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.ConstTensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tensorrt.TensorType data_type = 2 [default = DT_FLOAT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tensorrt::TensorType_IsValid(value)) {
            set_data_type(static_cast< ::tensorrt::TensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 int32_data = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.ConstTensor.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 data_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_data_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zero_point = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_zero_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool quantized = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_quantized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quantized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.ConstTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.ConstTensor)
  return false;
#undef DO_
}

void ConstTensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.ConstTensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tensorrt.TensorType data_type = 2 [default = DT_FLOAT];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _float_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->float_data().data(), this->float_data_size(), output);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int32_data_cached_byte_size_));
  }
  for (int i = 0, n = this->int32_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.ConstTensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int64 offset = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->offset(), output);
  }

  // optional int64 data_size = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->data_size(), output);
  }

  // optional float scale = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scale(), output);
  }

  // optional int32 zero_point = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zero_point(), output);
  }

  // optional bool quantized = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->quantized(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.ConstTensor)
}

::google::protobuf::uint8* ConstTensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.ConstTensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->dims_, target);

  cached_has_bits = _has_bits_[0];
  // optional .tensorrt.TensorType data_type = 2 [default = DT_FLOAT];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _float_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data_, target);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _int32_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_data_, target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.ConstTensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 offset = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->offset(), target);
  }

  // optional int64 data_size = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->data_size(), target);
  }

  // optional float scale = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->scale(), target);
  }

  // optional int32 zero_point = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zero_point(), target);
  }

  // optional bool quantized = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->quantized(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.ConstTensor)
  return target;
}

size_t ConstTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.ConstTensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 dims = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  // repeated float float_data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->float_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int32_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional int64 data_size = 7;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_size());
    }

    // optional float scale = 8;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional int32 zero_point = 9;
    if (has_zero_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_point());
    }

    // optional bool quantized = 10 [default = false];
    if (has_quantized()) {
      total_size += 1 + 1;
    }

    // optional .tensorrt.TensorType data_type = 2 [default = DT_FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstTensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.ConstTensor)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstTensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstTensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.ConstTensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.ConstTensor)
    MergeFrom(*source);
  }
}

void ConstTensor::MergeFrom(const ConstTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.ConstTensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_size_ = from.data_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      zero_point_ = from.zero_point_;
    }
    if (cached_has_bits & 0x00000020u) {
      quantized_ = from.quantized_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_type_ = from.data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConstTensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.ConstTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstTensor::CopyFrom(const ConstTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.ConstTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstTensor::IsInitialized() const {
  return true;
}

void ConstTensor::Swap(ConstTensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstTensor::InternalSwap(ConstTensor* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  float_data_.InternalSwap(&other->float_data_);
  int32_data_.InternalSwap(&other->int32_data_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(data_size_, other->data_size_);
  swap(scale_, other->scale_);
  swap(zero_point_, other->zero_point_);
  swap(quantized_, other->quantized_);
  swap(data_type_, other->data_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstTensor::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Argument::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Argument::kNameFieldNumber;
const int Argument::kFFieldNumber;
const int Argument::kIFieldNumber;
const int Argument::kSFieldNumber;
const int Argument::kFloatsFieldNumber;
const int Argument::kIntsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Argument::Argument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_Argument.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.Argument)
}
Argument::Argument(const Argument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      floats_(from.floats_),
      ints_(from.ints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s()) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  ::memcpy(&i_, &from.i_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_) -
    reinterpret_cast<char*>(&i_)) + sizeof(f_));
  // @@protoc_insertion_point(copy_constructor:tensorrt.Argument)
}

void Argument::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&i_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_) -
      reinterpret_cast<char*>(&i_)) + sizeof(f_));
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:tensorrt.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Argument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Argument& Argument::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_Argument.base);
  return *internal_default_instance();
}


void Argument::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floats_.Clear();
  ints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      s_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&i_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f_) -
        reinterpret_cast<char*>(&i_)) + sizeof(f_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.Argument)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.Argument.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float f = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 i = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float floats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_floats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 ints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_ints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.Argument.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
  }

  // optional int64 i = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i(), output);
  }

  // optional bytes s = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s(), output);
  }

  // repeated float floats = 5;
  for (int i = 0, n = this->floats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->floats(i), output);
  }

  // repeated int64 ints = 6;
  for (int i = 0, n = this->ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->ints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.Argument)
}

::google::protobuf::uint8* Argument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.Argument.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f(), target);
  }

  // optional int64 i = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i(), target);
  }

  // optional bytes s = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s(), target);
  }

  // repeated float floats = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->floats_, target);

  // repeated int64 ints = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->ints_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.Argument)
  return target;
}

size_t Argument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.Argument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float floats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->floats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->floats_size());
    total_size += data_size;
  }

  // repeated int64 ints = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->ints_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ints_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes s = 4;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s());
    }

    // optional int64 i = 3;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i());
    }

    // optional float f = 2;
    if (has_f()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.Argument)
  GOOGLE_DCHECK_NE(&from, this);
  const Argument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Argument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.Argument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.Argument)
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.Argument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  floats_.MergeFrom(from.floats_);
  ints_.MergeFrom(from.ints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s();
      s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
    }
    if (cached_has_bits & 0x00000004u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000008u) {
      f_ = from.f_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  return true;
}

void Argument::Swap(Argument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument::InternalSwap(Argument* other) {
  using std::swap;
  floats_.InternalSwap(&other->floats_);
  ints_.InternalSwap(&other->ints_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(i_, other->i_);
  swap(f_, other->f_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutputShape::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputShape::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputShape::OutputShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_OutputShape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.OutputShape)
}
OutputShape::OutputShape(const OutputShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorrt.OutputShape)
}

void OutputShape::SharedCtor() {
}

OutputShape::~OutputShape() {
  // @@protoc_insertion_point(destructor:tensorrt.OutputShape)
  SharedDtor();
}

void OutputShape::SharedDtor() {
}

void OutputShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OutputShape::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutputShape& OutputShape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_OutputShape.base);
  return *internal_default_instance();
}


void OutputShape::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.OutputShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutputShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.OutputShape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.OutputShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.OutputShape)
  return false;
#undef DO_
}

void OutputShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.OutputShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.OutputShape)
}

::google::protobuf::uint8* OutputShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.OutputShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->dims_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.OutputShape)
  return target;
}

size_t OutputShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.OutputShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 dims = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.OutputShape)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutputShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.OutputShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.OutputShape)
    MergeFrom(*source);
  }
}

void OutputShape::MergeFrom(const OutputShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.OutputShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
}

void OutputShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.OutputShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputShape::CopyFrom(const OutputShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.OutputShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputShape::IsInitialized() const {
  return true;
}

void OutputShape::Swap(OutputShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputShape::InternalSwap(OutputShape* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OutputShape::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuantizeActivationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuantizeActivationInfo::kScaleFieldNumber;
const int QuantizeActivationInfo::kZeroPointFieldNumber;
const int QuantizeActivationInfo::kMinvalFieldNumber;
const int QuantizeActivationInfo::kMaxvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuantizeActivationInfo::QuantizeActivationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_QuantizeActivationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.QuantizeActivationInfo)
}
QuantizeActivationInfo::QuantizeActivationInfo(const QuantizeActivationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxval_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(maxval_));
  // @@protoc_insertion_point(copy_constructor:tensorrt.QuantizeActivationInfo)
}

void QuantizeActivationInfo::SharedCtor() {
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxval_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(maxval_));
}

QuantizeActivationInfo::~QuantizeActivationInfo() {
  // @@protoc_insertion_point(destructor:tensorrt.QuantizeActivationInfo)
  SharedDtor();
}

void QuantizeActivationInfo::SharedDtor() {
}

void QuantizeActivationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QuantizeActivationInfo::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuantizeActivationInfo& QuantizeActivationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_QuantizeActivationInfo.base);
  return *internal_default_instance();
}


void QuantizeActivationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.QuantizeActivationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxval_) -
        reinterpret_cast<char*>(&scale_)) + sizeof(maxval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuantizeActivationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.QuantizeActivationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zero_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_zero_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float minval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float maxval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.QuantizeActivationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.QuantizeActivationInfo)
  return false;
#undef DO_
}

void QuantizeActivationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.QuantizeActivationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional int32 zero_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zero_point(), output);
  }

  // optional float minval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minval(), output);
  }

  // optional float maxval = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.QuantizeActivationInfo)
}

::google::protobuf::uint8* QuantizeActivationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.QuantizeActivationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional int32 zero_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zero_point(), target);
  }

  // optional float minval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minval(), target);
  }

  // optional float maxval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.QuantizeActivationInfo)
  return target;
}

size_t QuantizeActivationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.QuantizeActivationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float scale = 1;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional int32 zero_point = 2;
    if (has_zero_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_point());
    }

    // optional float minval = 3;
    if (has_minval()) {
      total_size += 1 + 4;
    }

    // optional float maxval = 4;
    if (has_maxval()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizeActivationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.QuantizeActivationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantizeActivationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuantizeActivationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.QuantizeActivationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.QuantizeActivationInfo)
    MergeFrom(*source);
  }
}

void QuantizeActivationInfo::MergeFrom(const QuantizeActivationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.QuantizeActivationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      zero_point_ = from.zero_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      minval_ = from.minval_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxval_ = from.maxval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuantizeActivationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.QuantizeActivationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizeActivationInfo::CopyFrom(const QuantizeActivationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.QuantizeActivationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizeActivationInfo::IsInitialized() const {
  return true;
}

void QuantizeActivationInfo::Swap(QuantizeActivationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuantizeActivationInfo::InternalSwap(QuantizeActivationInfo* other) {
  using std::swap;
  swap(scale_, other->scale_);
  swap(zero_point_, other->zero_point_);
  swap(minval_, other->minval_);
  swap(maxval_, other->maxval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QuantizeActivationInfo::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperatorDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatorDef::kInputFieldNumber;
const int OperatorDef::kOutputFieldNumber;
const int OperatorDef::kNameFieldNumber;
const int OperatorDef::kTypeFieldNumber;
const int OperatorDef::kArgFieldNumber;
const int OperatorDef::kOutputShapeFieldNumber;
const int OperatorDef::kOutputTypeFieldNumber;
const int OperatorDef::kQuantizeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorDef::OperatorDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_OperatorDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.OperatorDef)
}
OperatorDef::OperatorDef(const OperatorDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      input_(from.input_),
      output_(from.output_),
      arg_(from.arg_),
      output_shape_(from.output_shape_),
      output_type_(from.output_type_),
      quantize_info_(from.quantize_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorrt.OperatorDef)
}

void OperatorDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OperatorDef::~OperatorDef() {
  // @@protoc_insertion_point(destructor:tensorrt.OperatorDef)
  SharedDtor();
}

void OperatorDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperatorDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperatorDef::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatorDef& OperatorDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_OperatorDef.base);
  return *internal_default_instance();
}


void OperatorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  arg_.Clear();
  output_shape_.Clear();
  output_type_.Clear();
  quantize_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperatorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.OperatorDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            static_cast<int>(this->input(this->input_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.OperatorDef.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output(this->output_size() - 1).data(),
            static_cast<int>(this->output(this->output_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.OperatorDef.output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.OperatorDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.OperatorDef.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.Argument arg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.OutputShape output_shape = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.TensorType output_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tensorrt::TensorType_IsValid(value)) {
            add_output_type(static_cast< ::tensorrt::TensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 7,
                 ::tensorrt::TensorType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_output_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.QuantizeActivationInfo quantize_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quantize_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.OperatorDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.OperatorDef)
  return false;
#undef DO_
}

void OperatorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output(i).data(), static_cast<int>(this->output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // repeated .tensorrt.Argument arg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->arg(static_cast<int>(i)),
      output);
  }

  // repeated .tensorrt.OutputShape output_shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->output_shape(static_cast<int>(i)),
      output);
  }

  // repeated .tensorrt.TensorType output_type = 7;
  for (int i = 0, n = this->output_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->output_type(i), output);
  }

  // repeated .tensorrt.QuantizeActivationInfo quantize_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantize_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->quantize_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.OperatorDef)
}

::google::protobuf::uint8* OperatorDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input(i), target);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output(i).data(), static_cast<int>(this->output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->output(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.OperatorDef.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // repeated .tensorrt.Argument arg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->arg(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorrt.OutputShape output_shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->output_shape(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorrt.TensorType output_type = 7;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    7, this->output_type_, target);

  // repeated .tensorrt.QuantizeActivationInfo quantize_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantize_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->quantize_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.OperatorDef)
  return target;
}

size_t OperatorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.OperatorDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string input = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0, n = this->output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated .tensorrt.Argument arg = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->arg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arg(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.OutputShape output_shape = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->output_shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_shape(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.TensorType output_type = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->output_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->output_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .tensorrt.QuantizeActivationInfo quantize_info = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->quantize_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quantize_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatorDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatorDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatorDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.OperatorDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.OperatorDef)
    MergeFrom(*source);
  }
}

void OperatorDef::MergeFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  arg_.MergeFrom(from.arg_);
  output_shape_.MergeFrom(from.output_shape_);
  output_type_.MergeFrom(from.output_type_);
  quantize_info_.MergeFrom(from.quantize_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void OperatorDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorDef::CopyFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorDef::IsInitialized() const {
  return true;
}

void OperatorDef::Swap(OperatorDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorDef::InternalSwap(OperatorDef* other) {
  using std::swap;
  input_.InternalSwap(CastToBase(&other->input_));
  output_.InternalSwap(CastToBase(&other->output_));
  CastToBase(&arg_)->InternalSwap(CastToBase(&other->arg_));
  CastToBase(&output_shape_)->InternalSwap(CastToBase(&other->output_shape_));
  output_type_.InternalSwap(&other->output_type_);
  CastToBase(&quantize_info_)->InternalSwap(CastToBase(&other->quantize_info_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperatorDef::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InOutTensorInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InOutTensorInfo::kNameFieldNumber;
const int InOutTensorInfo::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InOutTensorInfo::InOutTensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_InOutTensorInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.InOutTensorInfo)
}
InOutTensorInfo::InOutTensorInfo(const InOutTensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorrt.InOutTensorInfo)
}

void InOutTensorInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InOutTensorInfo::~InOutTensorInfo() {
  // @@protoc_insertion_point(destructor:tensorrt.InOutTensorInfo)
  SharedDtor();
}

void InOutTensorInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InOutTensorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InOutTensorInfo::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InOutTensorInfo& InOutTensorInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_InOutTensorInfo.base);
  return *internal_default_instance();
}


void InOutTensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.InOutTensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InOutTensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.InOutTensorInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.InOutTensorInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float dims = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.InOutTensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.InOutTensorInfo)
  return false;
#undef DO_
}

void InOutTensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.InOutTensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.InOutTensorInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated float dims = 3;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->dims(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.InOutTensorInfo)
}

::google::protobuf::uint8* InOutTensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.InOutTensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.InOutTensorInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated float dims = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->dims_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.InOutTensorInfo)
  return target;
}

size_t InOutTensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.InOutTensorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float dims = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dims_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InOutTensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.InOutTensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InOutTensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InOutTensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.InOutTensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.InOutTensorInfo)
    MergeFrom(*source);
  }
}

void InOutTensorInfo::MergeFrom(const InOutTensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.InOutTensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InOutTensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.InOutTensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InOutTensorInfo::CopyFrom(const InOutTensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.InOutTensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InOutTensorInfo::IsInitialized() const {
  return true;
}

void InOutTensorInfo::Swap(InOutTensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InOutTensorInfo::InternalSwap(InOutTensorInfo* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InOutTensorInfo::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetDef::kNameFieldNumber;
const int NetDef::kOpFieldNumber;
const int NetDef::kVersionFieldNumber;
const int NetDef::kArgFieldNumber;
const int NetDef::kTensorsFieldNumber;
const int NetDef::kInputInfoFieldNumber;
const int NetDef::kOutputInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetDef::NetDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorrt_2eproto::scc_info_NetDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorrt.NetDef)
}
NetDef::NetDef(const NetDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      op_(from.op_),
      arg_(from.arg_),
      tensors_(from.tensors_),
      input_info_(from.input_info_),
      output_info_(from.output_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorrt.NetDef)
}

void NetDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NetDef::~NetDef() {
  // @@protoc_insertion_point(destructor:tensorrt.NetDef)
  SharedDtor();
}

void NetDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetDef::descriptor() {
  ::protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetDef& NetDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorrt_2eproto::scc_info_NetDef.base);
  return *internal_default_instance();
}


void NetDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorrt.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.Clear();
  arg_.Clear();
  tensors_.Clear();
  input_info_.Clear();
  output_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorrt.NetDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.NetDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.OperatorDef op = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tensorrt.NetDef.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.Argument arg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.ConstTensor tensors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.InOutTensorInfo input_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorrt.InOutTensorInfo output_info = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorrt.NetDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorrt.NetDef)
  return false;
#undef DO_
}

void NetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorrt.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.NetDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .tensorrt.OperatorDef op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->op(static_cast<int>(i)),
      output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.NetDef.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // repeated .tensorrt.Argument arg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->arg(static_cast<int>(i)),
      output);
  }

  // repeated .tensorrt.ConstTensor tensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->tensors(static_cast<int>(i)),
      output);
  }

  // repeated .tensorrt.InOutTensorInfo input_info = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100,
      this->input_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorrt.InOutTensorInfo output_info = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101,
      this->output_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorrt.NetDef)
}

::google::protobuf::uint8* NetDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorrt.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.NetDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .tensorrt.OperatorDef op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->op(static_cast<int>(i)), deterministic, target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tensorrt.NetDef.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // repeated .tensorrt.Argument arg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->arg(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorrt.ConstTensor tensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->tensors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorrt.InOutTensorInfo input_info = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->input_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorrt.InOutTensorInfo output_info = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->output_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorrt.NetDef)
  return target;
}

size_t NetDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorrt.NetDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tensorrt.OperatorDef op = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->op_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->op(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.Argument arg = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->arg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arg(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.ConstTensor tensors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tensors(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.InOutTensorInfo input_info = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->input_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorrt.InOutTensorInfo output_info = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->output_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorrt.NetDef)
  GOOGLE_DCHECK_NE(&from, this);
  const NetDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorrt.NetDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorrt.NetDef)
    MergeFrom(*source);
  }
}

void NetDef::MergeFrom(const NetDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorrt.NetDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_.MergeFrom(from.op_);
  arg_.MergeFrom(from.arg_);
  tensors_.MergeFrom(from.tensors_);
  input_info_.MergeFrom(from.input_info_);
  output_info_.MergeFrom(from.output_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
}

void NetDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorrt.NetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDef::CopyFrom(const NetDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorrt.NetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDef::IsInitialized() const {
  return true;
}

void NetDef::Swap(NetDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetDef::InternalSwap(NetDef* other) {
  using std::swap;
  CastToBase(&op_)->InternalSwap(CastToBase(&other->op_));
  CastToBase(&arg_)->InternalSwap(CastToBase(&other->arg_));
  CastToBase(&tensors_)->InternalSwap(CastToBase(&other->tensors_));
  CastToBase(&input_info_)->InternalSwap(CastToBase(&other->input_info_));
  CastToBase(&output_info_)->InternalSwap(CastToBase(&other->output_info_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetDef::GetMetadata() const {
  protobuf_tensorrt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorrt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorrt
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::ConstTensor* Arena::CreateMaybeMessage< ::tensorrt::ConstTensor >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::ConstTensor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::Argument* Arena::CreateMaybeMessage< ::tensorrt::Argument >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::Argument >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::OutputShape* Arena::CreateMaybeMessage< ::tensorrt::OutputShape >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::OutputShape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::QuantizeActivationInfo* Arena::CreateMaybeMessage< ::tensorrt::QuantizeActivationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::QuantizeActivationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::OperatorDef* Arena::CreateMaybeMessage< ::tensorrt::OperatorDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::OperatorDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::InOutTensorInfo* Arena::CreateMaybeMessage< ::tensorrt::InOutTensorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::InOutTensorInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorrt::NetDef* Arena::CreateMaybeMessage< ::tensorrt::NetDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorrt::NetDef >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

syntax = "proto2";

package tensorrt;

enum TensorType {
  DT_INVALID = 0;
  DT_FLOAT = 1;
  DT_UINT8 = 2;
  DT_HALF = 3;
  DT_INT32 = 4;
}

message ConstTensor {
  repeated int64 dims = 1;
  optional TensorType data_type = 2 [default = DT_FLOAT];
  repeated float float_data = 3 [packed = true];
  repeated int32 int32_data = 4 [packed = true];
  optional string name = 5;
  optional int64 offset = 6;
  optional int64 data_size = 7;
  optional float scale = 8;
  optional int32 zero_point = 9;
  optional bool quantized = 10 [default = false];

}

message Argument {
  optional string name = 1;
  optional float f = 2;
  optional int64 i = 3;
  optional bytes s = 4;
  repeated float floats = 5;
  repeated int64 ints = 6;
}

message OutputShape {
  repeated int64 dims = 1;
}

message QuantizeActivationInfo {
  optional float scale = 1;
  optional int32 zero_point = 2;
  optional float minval = 3;  
  optional float maxval = 4;
}

message OperatorDef {
  repeated string input = 1;
  repeated string output = 2;
  optional string name = 3;
  optional string type = 4;
  repeated Argument arg = 5;
  repeated OutputShape output_shape = 6;
  repeated TensorType output_type = 7;
  repeated QuantizeActivationInfo quantize_info = 8;

}

message InOutTensorInfo {
  optional string name = 1;
  repeated float dims = 3;
}

message NetDef {
  optional string name = 1;
  repeated OperatorDef op = 2;
  optional string version = 3;
  repeated Argument arg = 4;
  repeated ConstTensor tensors = 5;

  repeated InOutTensorInfo input_info = 100;
  repeated InOutTensorInfo output_info = 101;
}
